// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'secrets.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

   static const FirebaseOptions web = FirebaseOptions(
    apiKey: Secrets.firebaseApiKeyWeb,
    appId: Secrets.firebaseAppIdWeb,
    messagingSenderId: Secrets.firebaseMessagingSenderIdWeb,
    projectId: Secrets.firebaseProjectIdWeb,
    authDomain: Secrets.firebaseAuthDomainWeb,
    storageBucket: Secrets.firebaseStorageBucketWeb,
    measurementId: Secrets.firebaseMeasurementIdWeb,
    databaseURL: Secrets.firebaseDatabaseUrlWeb,
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: Secrets.firebaseApiKeyAndroid,
    appId: Secrets.firebaseAppIdAndroid,
    messagingSenderId: Secrets.firebaseMessagingSenderIdAndroid,
    projectId: Secrets.firebaseProjectIdAndroid,
    storageBucket: Secrets.firebaseStorageBucketAndroid,
    databaseURL: Secrets.firebaseDatabaseUrlAndroid,
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: Secrets.firebaseApiKeyIos,
    appId: Secrets.firebaseAppIdIos,
    messagingSenderId: Secrets.firebaseMessagingSenderIdIos,
    projectId: Secrets.firebaseProjectIdIos,
    storageBucket: Secrets.firebaseStorageBucketIos,
    iosBundleId: Secrets.firebaseIosBundleId,
    databaseURL: Secrets.firebaseDatabaseUrlIos,
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: Secrets.firebaseApiKeyMacos,
    appId: Secrets.firebaseAppIdMacos,
    messagingSenderId: Secrets.firebaseMessagingSenderIdMacos,
    projectId: Secrets.firebaseProjectIdMacos,
    storageBucket: Secrets.firebaseStorageBucketMacos,
    iosBundleId: Secrets.firebaseIosBundleIdMacos,
    databaseURL: Secrets.firebaseDatabaseUrlMacos,
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: Secrets.firebaseApiKeyWindows,
    appId: Secrets.firebaseAppIdWindows,
    messagingSenderId: Secrets.firebaseMessagingSenderIdWindows,
    projectId: Secrets.firebaseProjectIdWindows,
    authDomain: Secrets.firebaseAuthDomainWindows,
    storageBucket: Secrets.firebaseStorageBucketWindows,
    measurementId: Secrets.firebaseMeasurementIdWindows,
    databaseURL: Secrets.firebaseDatabaseUrlWindows,
  );
}
